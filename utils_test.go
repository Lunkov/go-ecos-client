package clientecos

import (
  "testing"
  "github.com/stretchr/testify/assert"
  
  "crypto/sha512"
  "crypto/ecdsa"
  "github.com/Lunkov/lib-wallets"
)

func TestECDSA(t *testing.T) {
  
  w := &wallets.WalletHD{}
  w.Create(&map[string]string{"mnemonic": "chase oil pigeon elegant ketchup whip frozen beauty unknown brass amount slender pony pottery attitude flavor rifle primary beach sign glue oven crazy lottery"})

  //pkBuf, okpk := PublicKeyToBytes(w.Master.PrivateECDSA)
  pkBuf, okpk := Serialize(w.Master.PublicECDSA)

	assert.True(t, okpk)
  assert.Equal(t, []byte{0x22, 0xff, 0x83, 0x3, 0x1, 0x1, 0x8, 0x45, 0x43, 0x44, 0x53, 0x41, 0x42, 0x75, 0x66, 0x1, 0xff, 0x84, 0x0, 0x1, 0x2, 0x1, 0x1, 0x58, 0x1, 0xa, 0x0, 0x1, 0x1, 0x59, 0x1, 0xa, 0x0, 0x0, 0x0, 0x47, 0xff, 0x84, 0x1, 0x20, 0x23, 0xf, 0x74, 0x93, 0x9e, 0x44, 0x5, 0x58, 0xc0, 0xf5, 0xf8, 0xc7, 0x37, 0xeb, 0x8, 0x7b, 0xd6, 0x6, 0x25, 0x60, 0xb0, 0x62, 0xc6, 0x9a, 0x18, 0x68, 0xef, 0x18, 0x5, 0x68, 0xe1, 0x6b, 0x1, 0x20, 0xc, 0x74, 0x19, 0x99, 0xe7, 0x3a, 0x8a, 0xd9, 0xdf, 0x6c, 0xd3, 0xb3, 0x56, 0x11, 0x4b, 0x4c, 0x1, 0x54, 0x7e, 0xf7, 0x85, 0x84, 0x71, 0xc, 0x32, 0xb2, 0xe6, 0xc7, 0x6a, 0x9, 0x49, 0x53, 0x0}, pkBuf)
  
  message := []byte("Hello world")
  signature, sok := ECDSA256Sign(w.Master.PrivateECDSA, message)
  assert.True(t, sok)
  //assert.Equal(t, []byte{0x30, 0x46, 0x2, 0x21, 0x0, 0x99, 0xfa, 0x56, 0x93, 0xe5, 0x7d, 0xcb, 0x0, 0x45, 0xeb, 0x7e, 0xef, 0xd7, 0x7f, 0x47, 0xdc, 0xd9, 0xf, 0x5c, 0x42, 0xbb, 0xf0, 0x97, 0xca, 0x3f, 0x8f, 0x3, 0x5a, 0xee, 0xc2, 0x33, 0x3c, 0x2, 0x21, 0x0, 0xdb, 0xbd, 0xed, 0xe5, 0xc, 0x6b, 0xaa, 0x8d, 0x8d, 0x77, 0x1c, 0x0, 0x9a, 0x63, 0x90, 0x4f, 0xc4, 0x68, 0x57, 0xf2, 0x1a, 0xf4, 0xd4, 0xe7, 0x86, 0x24, 0x73, 0x57, 0xa2, 0x21, 0x25, 0x49}, signature)
  
  
  hashed := sha512.Sum512(message)
  vok1 := ecdsa.VerifyASN1(w.Master.PublicECDSA, hashed[:], signature)
  assert.True(t, vok1)
  
  
  //vok := ECDSA256Verify(pkBuf, message, signature)
  //assert.True(t, vok)
}
